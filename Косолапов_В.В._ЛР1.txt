1)С помощью команд или (глобальных конфигураций) указываем имя пользователя, а также email (их нужно указывать только один раз, потому что следующие проекты будут создаваться под этим 
именем и email).
git config --global user.name "Vladimir Kosolapov"
git config --global user.email "kosolapov1020@mail.ru"
2)cd Projects/ - переход в папку Projects (для создания новой директории)
mkdir git-sample - создание новой директории или каталога проекта (под названием git-sample)
cd git-sample - переход в папку git-sample
git init - инициализация git (это означает, что данная директория была проинициализирована как git проект и в этой директории создается "невидимая" папка .git)
3)touch Косолапов_В.В._ЛР1.txt - создание отчета по первой лабораторной работе
git add Косолапов_В.В._ЛР1.txt - добавление файла Косолапов_В.В._ЛР1.txt на коммит кандидат
git status - проверяет изменения, что было создано или сделано ( у меня показывает, что пока еще не было коммитов, создан один новый файл Косолапов_В.В._ЛР1.txt)
git commit -m "First commit" - сохраняет изменения, сделанные пользователем (у меня показывает, что был изменен (создан) файл Косолапов_В.В._ЛР1.txt), комментарий: первый коммит
gitk - позволяет посмотреть историю коммитов (в левом верхнем углу написан First commit, который был выполнен)
4)Внесение в файл описание действий перед вторым коммитом, которые выше этого пункта, а далее:
git add Косолапов_В.В._ЛР1.txt - добавление файла Косолапов_В.В._ЛР1.txt на коммит кандидат
git status (1 файл изменен, 15 строк добавлено)
git commit -m "Second commit" - сохранение изменений (Второй коммит).
5)Продемонстрировать игнорирование, сравнение, удаление и перемещение файлов.
Игнорирование файлов осуществляется с помощью специальной команды .gitignore:
touch .gitignore - создание файла (он будет игнорировать файлы определенных расширений)
nano -w .gitignore - в текстовом редакторе прописываем расширения файлов, которые должен игнорировать git
cat .gitignore - просмотр содержимого нашего файла
*.md
*.css
touch human.md unix.txt kolin.css - создаем вот такие файлы с разными расширениями
git add . - индексация изменений
git status - при выполнении этой команды мы видим, что git проигнорировал файлы тех расширений, которые мы указали в .gitignore (а именно, human.md, inder.html, kolin.css)
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .gitignore
        new file:   unix.txt
Сравнение в git осуществляется с помощью команды git diff:
git branch dev - создание новой ветки (для сравнения файлов)
git checkout dev - переход на новую ветку dev
touch index.html - создание нового файла на ветке dev
nano -w index.html - пишем "какой-нибудь" текст
git add index.html - коммит кандидат
git status
On branch dev
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   index.html
git commit -m "Firstly" - коммит на ветке dev
git checkout master - переход на ветку master
touch index.html - создаем файл с таким же названием
nano -w index.html - заполняем его "другим" текстом, чтобы он отличался от файла на ветке dev
git add index.html - коммит кандидат
git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   index.html
git commit -m "Sravn" - коммит на ветке master
git diff master:index.html dev:index.html - сравнение файлов index.html на ветках master и dev
diff --git a/index.html b/index.html
index ed0e514..ae8f2be 100644
--- a/index.html
+++ b/index.html
@@ -1,10 +1,11 @@
 <html>
  <head>
-
+  <title> Index </title>
  </head>
-
  <body>
-
+  <table>
+   <h1>
+   </h1>
+  </table>
  </body>
-
 </html>
git add . - индексируем изменения
git status - проверяем, что изменилось
git commit -m "Third commit" - сохранение изменений
