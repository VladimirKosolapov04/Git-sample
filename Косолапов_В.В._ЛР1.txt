1)С помощью команд или (глобальных конфигураций) указываем имя пользователя, а также email (их нужно указывать только один раз, потому что следующие проекты будут создаваться под этим 
именем и email).
git config --global user.name "Vladimir Kosolapov"
git config --global user.email "kosolapov1020@mail.ru"
2)cd Projects/ - переход в папку Projects (для создания новой директории)
mkdir git-sample - создание новой директории или каталога проекта (под названием git-sample)
cd git-sample - переход в папку git-sample
git init - инициализация git (это означает, что данная директория была проинициализирована как git проект и в этой директории создается "невидимая" папка .git)
3)touch Косолапов_В.В._ЛР1.txt - создание отчета по первой лабораторной работе
git add Косолапов_В.В._ЛР1.txt - добавление файла Косолапов_В.В._ЛР1.txt на коммит кандидат
git status - проверяет изменения, что было создано или сделано ( у меня показывает, что пока еще не было коммитов, создан один новый файл Косолапов_В.В._ЛР1.txt)
git commit -m "First commit" - сохраняет изменения, сделанные пользователем (у меня показывает, что был изменен (создан) файл Косолапов_В.В._ЛР1.txt), комментарий: первый коммит
gitk - позволяет посмотреть историю коммитов (в левом верхнем углу написан First commit, который был выполнен)
4)Внесение в файл описание действий перед вторым коммитом, которые выше этого пункта, а далее:
git add Косолапов_В.В._ЛР1.txt - добавление файла Косолапов_В.В._ЛР1.txt на коммит кандидат
git status (1 файл изменен, 15 строк добавлено)
git commit -m "Second commit" - сохранение изменений (Второй коммит).
5)Продемонстрировать игнорирование, сравнение, удаление и перемещение файлов.
Игнорирование файлов осуществляется с помощью специальной команды .gitignore:
touch .gitignore - создание файла (он будет игнорировать файлы определенных расширений)
nano -w .gitignore - в текстовом редакторе прописываем расширения файлов, которые должен игнорировать git
cat .gitignore - просмотр содержимого нашего файла
*.md
*.css
touch human.md unix.txt kolin.css - создаем вот такие файлы с разными расширениями
git add . - индексация изменений
git status - при выполнении этой команды мы видим, что git проигнорировал файлы тех расширений, которые мы указали в .gitignore (а именно, human.md, inder.html, kolin.css)
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .gitignore
        new file:   unix.txt
Сравнение в git осуществляется с помощью команды git diff:
git branch dev - создание новой ветки (для сравнения файлов)
git checkout dev - переход на новую ветку dev
touch index.html - создание нового файла на ветке dev
nano -w index.html - пишем "какой-нибудь" текст
git add index.html - коммит кандидат
git status
On branch dev
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   index.html
git commit -m "Firstly" - коммит на ветке dev
git checkout master - переход на ветку master
touch index.html - создаем файл с таким же названием
nano -w index.html - заполняем его "другим" текстом, чтобы он отличался от файла на ветке dev
git add index.html - коммит кандидат
git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   index.html
git commit -m "Sravn" - коммит на ветке master
git diff master:index.html dev:index.html - сравнение файлов index.html на ветках master и dev
diff --git a/index.html b/index.html
index ed0e514..ae8f2be 100644
--- a/index.html
+++ b/index.html
@@ -1,10 +1,11 @@
 <html>
  <head>
-
+  <title> Index </title>
  </head>
-
  <body>
-
+  <table>
+   <h1>
+   </h1>
+  </table>
  </body>
-
 </html>
git add . - индексируем изменения
git status - проверяем, что изменилось
git commit -m "Third commit" - сохранение изменений
Удаление файлов в git осуществляется с помощью команды git rm "файл который надо удалить":
git rm .gitignore - удаляем этого файла
git add . - индексируем все изменения
git status - узнаем, что изменилось
git commit -m "Delete file"
Перемещение файлов осуществляется с помощью команды mv <файл> <папка или директория>:
mkdir test_dir - создание новой директории
ls - просматриваем содержимое и видим, что создалась новая директория test_dir
index.html  test_dir/  unix.txt  Косолапов_В.В._ЛР1.txt
mv unix.txt test_dir - перемещаем файл в новую директорию
git add . - индексируем все изменения
git status - просмтариваем, что изменилось
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        renamed:    unix.txt -> test_dir/unix.txt
git commit -m "Removed unix.txt -> test_dir/"
6)Продемонстрировать механизм работы с командой git log для получения информации об истории коммитов:
git log - по умолчанию без модификаций эта команда выводит историю коммитов в обратном хронологическом порядке (также она отображает sha коммита, автора и майл, дату и комментарий к коммиту).

git log -p -2 - показывает разницу, принесенную каждым коммитом, так называемая дельта по строкам (допустим если мы указываем ключ 2, то мы ограничим вывод до 2 последних записей).
git log -p --word-diff - позволяет посмотреть историю коммитов на уровне слов (Дельты на уровне слов практически бесполезны при работе над программным кодом, но они буду очень кстати при работе над длинным текстом, таким как книга или диссертация.)
git log --stat - позволяет получить некоторую краткую характеристику по каждому коммиту (выводит под каждым коммитом список изменённых файлов, количество изменённых файлов, а также количество добавленных и удалённых строк в этих файлах.).
7)Продемонстрировать механизм отмену сделанных изменений и работу с метками:
Отмена сделанных изменений:
git checkout -- <file> - позволяет отменить последние коммиты сделанные в файле (доупустим если вы запишете в файл inex.txt Hello, то при выполнении команды git checkout inex.txt произойдет отмена записи Hello в файл)
Но важно понимать, что git checkout -- <file> — опасная команда, так как  все локальные изменения в файле пропадут — Git просто заменит его версией из последнего коммита.
git reset HEAD <file> - используется для исключения файла из индекса (допустим если вы проиндексировали изменения в двух файлах, но хотите закоммитить только изменения в одном из них, то эта команда позволит нам отменить индексацию изменений в одном из файлов).
git commit --amend - эта команда использует область подготовки (индекс) для внесения правок в коммит (короче говоря, если вы сделали коммит, но забыли проиндексировать изменения в файле, который вы хотели добавить в коммит, то при выполнении этой команды последний коммит заменится на этот).
Работа с метками (метки в git называеются тегами):
git tag - данная команда перечисляет теги в алфавитном порядке; порядок их отображения не имеет существенного значения.
git tag (-l или --list) - использование команды с этими парамтерами позволяет отфильтровать список тегов согласно шаблону (к примеру, при выполнении команды git tag -l 'v1.8.5*' покажет нам список, который начинается с v1.8.5).
git tag -a <tagname> -m 'комментарий' - создание аннотированной метки (к примеру, git tag -a v1.3 -m 'my version 1.3'; параметр -m задаёт сообщение, которое будет храниться вместе с тегом. Если не указать сообщение, то Git запустит редактор, чтобы вы смогли его ввести.).
git show <tagname> - с помощью команды этой можно посмотреть данные тега вместе с коммитом.
git tag <tagname> - создание легковесной метки (на этот раз при выполнении git show для этого тега вы не увидите дополнительной информации, команда просто покажет коммит).
git tag -a <tagname> <контрольная сумма коммита или ее часть> - позволяет добавить метку к уже существующему коммиту.
git push origin <tagname> - позволяет отправить тег на удаленный сервер.
git push --tags - позволяет отправить все теги на удаленный сервер.
git tag -d <tagname> - позволяет удалить метку в локальном репозитории.
git push <remote> :refs/tags/<tagname> - позволяет удалить тег из удаленного репозитория (1-й способ).
git push origin --delete <tagname> - позволяет удалить тег из удаленного репозитория (2-й способ).
git checkout <tagname> - позволяет получить версии файлов, на которые указывает тег. 